--- ../src-base/minecraft/net/minecraft/item/Item.java
+++ ../src-work/minecraft/net/minecraft/item/Item.java
@@ -3,24 +3,11 @@
 import com.google.common.collect.HashMultimap;
 import com.google.common.collect.Maps;
 import com.google.common.collect.Multimap;
-import java.util.List;
-import java.util.Map;
-import java.util.Random;
-import java.util.UUID;
+
+import java.util.*;
 import javax.annotation.Nullable;
-import net.minecraft.block.Block;
-import net.minecraft.block.BlockDirt;
-import net.minecraft.block.BlockDoublePlant;
-import net.minecraft.block.BlockFlower;
-import net.minecraft.block.BlockPlanks;
-import net.minecraft.block.BlockPrismarine;
-import net.minecraft.block.BlockRedSandstone;
-import net.minecraft.block.BlockSand;
-import net.minecraft.block.BlockSandStone;
-import net.minecraft.block.BlockSilverfish;
-import net.minecraft.block.BlockStone;
-import net.minecraft.block.BlockStoneBrick;
-import net.minecraft.block.BlockWall;
+
+import net.minecraft.block.*;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.util.ITooltipFlag;
 import net.minecraft.creativetab.CreativeTabs;
@@ -31,7 +18,9 @@
 import net.minecraft.entity.item.EntityItemFrame;
 import net.minecraft.entity.item.EntityMinecart;
 import net.minecraft.entity.item.EntityPainting;
+import net.minecraft.entity.passive.EntityHorse;
 import net.minecraft.entity.player.EntityPlayer;
+import net.minecraft.entity.player.EntityPlayerMP;
 import net.minecraft.init.Blocks;
 import net.minecraft.init.Items;
 import net.minecraft.init.MobEffects;
@@ -54,14 +43,17 @@
 import net.minecraft.util.registry.RegistryNamespaced;
 import net.minecraft.util.registry.RegistrySimple;
 import net.minecraft.util.text.translation.I18n;
+import net.minecraft.world.GameType;
 import net.minecraft.world.World;
 import net.minecraftforge.fml.relauncher.Side;
 import net.minecraftforge.fml.relauncher.SideOnly;
 
-public class Item
+import static net.minecraft.item.ItemMultiTexture.*;
+
+public class Item extends net.minecraftforge.registries.IForgeRegistryEntry.Impl<Item>
 {
-    public static final RegistryNamespaced<ResourceLocation, Item> field_150901_e = new RegistryNamespaced<ResourceLocation, Item>();
-    private static final Map<Block, Item> field_179220_a = Maps.<Block, Item>newHashMap();
+    public static final RegistryNamespaced<ResourceLocation, Item> field_150901_e = net.minecraftforge.registries.GameData.getWrapper(Item.class);
+    private static final Map<Block, Item> field_179220_a = net.minecraftforge.registries.GameData.getBlockItemMap();
     private static final IItemPropertyGetter field_185046_b = new IItemPropertyGetter()
     {
         @SideOnly(Side.CLIENT)
@@ -197,6 +189,7 @@
         return p_77654_1_;
     }
 
+    @Deprecated // Use ItemStack sensitive version below.
     public int func_77639_j()
     {
         return this.field_77777_bU;
@@ -218,6 +211,7 @@
         return this;
     }
 
+    @Deprecated
     public int func_77612_l()
     {
         return this.field_77699_b;
@@ -317,6 +311,7 @@
         return this.field_77700_c;
     }
 
+    @Deprecated // Use ItemStack sensitive version below.
     public boolean func_77634_r()
     {
         return this.field_77700_c != null;
@@ -372,7 +367,7 @@
 
     public boolean func_77616_k(ItemStack p_77616_1_)
     {
-        return this.func_77639_j() == 1 && this.func_77645_m();
+        return this.getItemStackLimit(p_77616_1_) == 1 && this.func_77645_m();
     }
 
     protected RayTraceResult func_77621_a(World p_77621_1_, EntityPlayer p_77621_2_, boolean p_77621_3_)
@@ -389,8 +384,8 @@
         float f5 = MathHelper.func_76126_a(-f * 0.017453292F);
         float f6 = f3 * f4;
         float f7 = f2 * f4;
-        double d3 = 5.0D;
-        Vec3d vec3d1 = vec3d.func_72441_c((double)f6 * 5.0D, (double)f5 * 5.0D, (double)f7 * 5.0D);
+        double d3 = p_77621_2_.func_110148_a(EntityPlayer.REACH_DISTANCE).func_111126_e();
+        Vec3d vec3d1 = vec3d.func_72441_c((double)f6 * d3, (double)f5 * d3, (double)f7 * d3);
         return p_77621_1_.func_147447_a(vec3d, vec3d1, p_77621_3_, !p_77621_3_, false);
     }
 
@@ -409,6 +404,9 @@
 
     protected boolean func_194125_a(CreativeTabs p_194125_1_)
     {
+        for (CreativeTabs tab : this.getCreativeTabs())
+            if (tab == p_194125_1_)
+                return true;
         CreativeTabs creativetabs = this.func_77640_w();
         return creativetabs != null && (p_194125_1_ == CreativeTabs.field_78027_g || p_194125_1_ == creativetabs);
     }
@@ -435,90 +433,736 @@
         return false;
     }
 
+    @Deprecated // Use ItemStack sensitive version below.
     public Multimap<String, AttributeModifier> func_111205_h(EntityEquipmentSlot p_111205_1_)
     {
         return HashMultimap.<String, AttributeModifier>create();
     }
 
-    public static void func_150900_l()
+    /* ======================================== FORGE START =====================================*/
+    /**
+     * ItemStack sensitive version of getItemAttributeModifiers
+     */
+    public Multimap<String, AttributeModifier> getAttributeModifiers(EntityEquipmentSlot slot, ItemStack stack)
     {
-        func_179214_a(Blocks.field_150350_a, new ItemAir(Blocks.field_150350_a));
-        func_179214_a(Blocks.field_150348_b, (new ItemMultiTexture(Blocks.field_150348_b, Blocks.field_150348_b, new ItemMultiTexture.Mapper()
+        return this.func_111205_h(slot);
+    }
+
+    /**
+     * Called when a player drops the item into the world,
+     * returning false from this will prevent the item from
+     * being removed from the players inventory and spawning
+     * in the world
+     *
+     * @param player The player that dropped the item
+     * @param item The item stack, before the item is removed.
+     */
+    public boolean onDroppedByPlayer(ItemStack item, EntityPlayer player)
+    {
+        return true;
+    }
+
+    /**
+     * Allow the item one last chance to modify its name used for the
+     * tool highlight useful for adding something extra that can't be removed
+     * by a user in the displayed name, such as a mode of operation.
+     *
+     * @param item the ItemStack for the item.
+     * @param displayName the name that will be displayed unless it is changed in this method.
+     */
+    public String getHighlightTip( ItemStack item, String displayName )
+    {
+        return displayName;
+    }
+
+    /**
+     * This is called when the item is used, before the block is activated.
+     * @param player The Player that used the item
+     * @param world The Current World
+     * @param pos Target position
+     * @param side The side of the target hit
+     * @param hand Which hand the item is being held in.
+     * @return Return PASS to allow vanilla handling, any other to skip normal code.
+     */
+    public EnumActionResult onItemUseFirst(EntityPlayer player, World world, BlockPos pos, EnumFacing side, float hitX, float hitY, float hitZ, EnumHand hand)
+    {
+        return EnumActionResult.PASS;
+    }
+
+    protected boolean canRepair = true;
+    /**
+     * Called by CraftingManager to determine if an item is reparable.
+     * @return True if reparable
+     */
+    public boolean isRepairable()
+    {
+        return canRepair && func_77645_m();
+    }
+
+    /**
+     * Call to disable repair recipes.
+     * @return The current Item instance
+     */
+    public Item setNoRepair()
+    {
+        canRepair = false;
+        return this;
+    }
+
+    /**
+     * Override this method to change the NBT data being sent to the client.
+     * You should ONLY override this when you have no other choice, as this might change behavior client side!
+     *
+     * Note that this will sometimes be applied multiple times, the following MUST be supported:
+     * Item item = stack.getItem();
+     * NBTTagCompound nbtShare1 = item.getNBTShareTag(stack);
+     * stack.setTagCompound(nbtShare1);
+     * NBTTagCompound nbtShare2 = item.getNBTShareTag(stack);
+     * assert nbtShare1.equals(nbtShare2);
+     *
+     * @param stack The stack to send the NBT tag for
+     * @return The NBT tag
+     */
+    @Nullable
+    public NBTTagCompound getNBTShareTag(ItemStack stack)
+    {
+        return stack.func_77978_p();
+    }
+
+    /**
+     * Called before a block is broken.  Return true to prevent default block harvesting.
+     *
+     * Note: In SMP, this is called on both client and server sides!
+     *
+     * @param itemstack The current ItemStack
+     * @param pos Block's position in world
+     * @param player The Player that is wielding the item
+     * @return True to prevent harvesting, false to continue as normal
+     */
+    public boolean onBlockStartBreak(ItemStack itemstack, BlockPos pos, EntityPlayer player)
+    {
+        return false;
+    }
+
+    /**
+     * Called each tick while using an item.
+     * @param stack The Item being used
+     * @param player The Player using the item
+     * @param count The amount of time in tick the item has been used for continuously
+     */
+    public void onUsingTick(ItemStack stack, EntityLivingBase player, int count)
+    {
+    }
+
+    /**
+     * Called when the player Left Clicks (attacks) an entity.
+     * Processed before damage is done, if return value is true further processing is canceled
+     * and the entity is not attacked.
+     *
+     * @param stack The Item being used
+     * @param player The player that is attacking
+     * @param entity The entity being attacked
+     * @return True to cancel the rest of the interaction.
+     */
+    public boolean onLeftClickEntity(ItemStack stack, EntityPlayer player, Entity entity)
+    {
+        return false;
+    }
+
+    /**
+     * ItemStack sensitive version of getContainerItem.
+     * Returns a full ItemStack instance of the result.
+     *
+     * @param itemStack The current ItemStack
+     * @return The resulting ItemStack
+     */
+    public ItemStack getContainerItem(ItemStack itemStack)
+    {
+        if (!hasContainerItem(itemStack))
         {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockStone.EnumType.func_176643_a(p_apply_1_.func_77960_j()).func_176644_c();
-            }
-        })).func_77655_b("stone"));
-        func_179214_a(Blocks.field_150349_c, new ItemColored(Blocks.field_150349_c, false));
-        func_179214_a(Blocks.field_150346_d, (new ItemMultiTexture(Blocks.field_150346_d, Blocks.field_150346_d, new ItemMultiTexture.Mapper()
+            return ItemStack.field_190927_a;
+        }
+        return new ItemStack(func_77668_q());
+    }
+
+    /**
+     * ItemStack sensitive version of hasContainerItem
+     * @param stack The current item stack
+     * @return True if this item has a 'container'
+     */
+    public boolean hasContainerItem(ItemStack stack)
+    {
+        return func_77634_r();
+    }
+
+    /**
+     * Retrieves the normal 'lifespan' of this item when it is dropped on the ground as a EntityItem.
+     * This is in ticks, standard result is 6000, or 5 mins.
+     *
+     * @param itemStack The current ItemStack
+     * @param world The world the entity is in
+     * @return The normal lifespan in ticks.
+     */
+    public int getEntityLifespan(ItemStack itemStack, World world)
+    {
+        return 6000;
+    }
+
+    /**
+     * Determines if this Item has a special entity for when they are in the world.
+     * Is called when a EntityItem is spawned in the world, if true and Item#createCustomEntity
+     * returns non null, the EntityItem will be destroyed and the new Entity will be added to the world.
+     *
+     * @param stack The current item stack
+     * @return True of the item has a custom entity, If true, Item#createCustomEntity will be called
+     */
+    public boolean hasCustomEntity(ItemStack stack)
+    {
+        return false;
+    }
+
+    /**
+     * This function should return a new entity to replace the dropped item.
+     * Returning null here will not kill the EntityItem and will leave it to function normally.
+     * Called when the item it placed in a world.
+     *
+     * @param world The world object
+     * @param location The EntityItem object, useful for getting the position of the entity
+     * @param itemstack The current item stack
+     * @return A new Entity object to spawn or null
+     */
+    @Nullable
+    public Entity createEntity(World world, Entity location, ItemStack itemstack)
+    {
+        return null;
+    }
+
+    /**
+     * Called by the default implemetation of EntityItem's onUpdate method, allowing for cleaner
+     * control over the update of the item without having to write a subclass.
+     *
+     * @param entityItem The entity Item
+     * @return Return true to skip any further update code.
+     */
+    public boolean onEntityItemUpdate(net.minecraft.entity.item.EntityItem entityItem)
+    {
+        return false;
+    }
+
+    /**
+     * Gets a list of tabs that items belonging to this class can display on,
+     * combined properly with getSubItems allows for a single item to span
+     * many sub-items across many tabs.
+     *
+     * @return A list of all tabs that this item could possibly be one.
+     */
+    public CreativeTabs[] getCreativeTabs()
+    {
+        return new CreativeTabs[]{ func_77640_w() };
+    }
+
+    /**
+     * Determines the base experience for a player when they remove this item from a furnace slot.
+     * This number must be between 0 and 1 for it to be valid.
+     * This number will be multiplied by the stack size to get the total experience.
+     *
+     * @param item The item stack the player is picking up.
+     * @return The amount to award for each item.
+     */
+    public float getSmeltingExperience(ItemStack item)
+    {
+        return -1; //-1 will default to the old lookups.
+    }
+
+    /**
+     *
+     * Should this item, when held, allow sneak-clicks to pass through to the underlying block?
+     *
+     * @param world The world
+     * @param pos Block position in world
+     * @param player The Player that is wielding the item
+     * @return
+     */
+    public boolean doesSneakBypassUse(ItemStack stack, net.minecraft.world.IBlockAccess world, BlockPos pos, EntityPlayer player)
+    {
+        return false;
+    }
+
+    /**
+     * Called to tick armor in the armor slot. Override to do something
+     */
+    public void onArmorTick(World world, EntityPlayer player, ItemStack itemStack){}
+
+    /**
+     * Determines if the specific ItemStack can be placed in the specified armor slot, for the entity.
+     *
+     * TODO: Change name to canEquip in 1.13?
+     *
+     * @param stack The ItemStack
+     * @param armorType Armor slot to be verified.
+     * @param entity The entity trying to equip the armor
+     * @return True if the given ItemStack can be inserted in the slot
+     */
+    public boolean isValidArmor(ItemStack stack, EntityEquipmentSlot armorType, Entity entity)
+    {
+        return net.minecraft.entity.EntityLiving.func_184640_d(stack) == armorType;
+    }
+
+    /**
+     * Override this to set a non-default armor slot for an ItemStack, but
+     * <em>do not use this to get the armor slot of said stack; for that, use
+     * {@link net.minecraft.entity.EntityLiving#getSlotForItemStack(ItemStack)}.</em>
+     *
+     * @param stack the ItemStack
+     * @return the armor slot of the ItemStack, or {@code null} to let the default
+     * vanilla logic as per {@code EntityLiving.getSlotForItemStack(stack)} decide
+     */
+    @Nullable
+    public EntityEquipmentSlot getEquipmentSlot(ItemStack stack)
+    {
+        return null;
+    }
+
+    /**
+     * Allow or forbid the specific book/item combination as an anvil enchant
+     *
+     * @param stack The item
+     * @param book The book
+     * @return if the enchantment is allowed
+     */
+    public boolean isBookEnchantable(ItemStack stack, ItemStack book)
+    {
+        return true;
+    }
+
+    /**
+     * Called by RenderBiped and RenderPlayer to determine the armor texture that
+     * should be use for the currently equipped item.
+     * This will only be called on instances of ItemArmor.
+     *
+     * Returning null from this function will use the default value.
+     *
+     * @param stack ItemStack for the equipped armor
+     * @param entity The entity wearing the armor
+     * @param slot The slot the armor is in
+     * @param type The subtype, can be null or "overlay"
+     * @return Path of texture to bind, or null to use default
+     */
+    @Nullable
+    public String getArmorTexture(ItemStack stack, Entity entity, EntityEquipmentSlot slot, String type)
+    {
+        return null;
+    }
+
+    /**
+     * Returns the font renderer used to render tooltips and overlays for this item.
+     * Returning null will use the standard font renderer.
+     *
+     * @param stack The current item stack
+     * @return A instance of FontRenderer or null to use default
+     */
+    @SideOnly(Side.CLIENT)
+    @Nullable
+    public net.minecraft.client.gui.FontRenderer getFontRenderer(ItemStack stack)
+    {
+        return null;
+    }
+
+    /**
+     * Override this method to have an item handle its own armor rendering.
+     *
+     * @param  entityLiving  The entity wearing the armor
+     * @param  itemStack  The itemStack to render the model of
+     * @param  armorSlot  The slot the armor is in
+     * @param _default Original armor model. Will have attributes set.
+     * @return  A ModelBiped to render instead of the default
+     */
+    @SideOnly(Side.CLIENT)
+    @Nullable
+    public net.minecraft.client.model.ModelBiped getArmorModel(EntityLivingBase entityLiving, ItemStack itemStack, EntityEquipmentSlot armorSlot, net.minecraft.client.model.ModelBiped _default)
+    {
+        return null;
+    }
+
+    /**
+     * Called when a entity tries to play the 'swing' animation.
+     *
+     * @param entityLiving The entity swinging the item.
+     * @param stack The Item stack
+     * @return True to cancel any further processing by EntityLiving
+     */
+    public boolean onEntitySwing(EntityLivingBase entityLiving, ItemStack stack)
+    {
+        return false;
+    }
+
+    /**
+     * Called when the client starts rendering the HUD, for whatever item the player currently has as a helmet.
+     * This is where pumpkins would render there overlay.
+     *
+     * @param stack The ItemStack that is equipped
+     * @param player Reference to the current client entity
+     * @param resolution Resolution information about the current viewport and configured GUI Scale
+     * @param partialTicks Partial ticks for the renderer, useful for interpolation
+     */
+    @SideOnly(Side.CLIENT)
+    public void renderHelmetOverlay(ItemStack stack, EntityPlayer player, net.minecraft.client.gui.ScaledResolution resolution, float partialTicks){}
+
+    /**
+     * Return the itemDamage represented by this ItemStack. Defaults to the itemDamage field on ItemStack, but can be overridden here for other sources such as NBT.
+     *
+     * @param stack The itemstack that is damaged
+     * @return the damage value
+     */
+    public int getDamage(ItemStack stack)
+    {
+        return stack.field_77991_e;
+    }
+
+    /**
+     * This used to be 'display damage' but its really just 'aux' data in the ItemStack, usually shares the same variable as damage.
+     * @param stack
+     * @return
+     */
+    public int getMetadata(ItemStack stack)
+    {
+        return stack.field_77991_e;
+    }
+
+    /**
+     * Determines if the durability bar should be rendered for this item.
+     * Defaults to vanilla stack.isDamaged behavior.
+     * But modders can use this for any data they wish.
+     *
+     * @param stack The current Item Stack
+     * @return True if it should render the 'durability' bar.
+     */
+    public boolean showDurabilityBar(ItemStack stack)
+    {
+        return stack.func_77951_h();
+    }
+
+    /**
+     * Queries the percentage of the 'Durability' bar that should be drawn.
+     *
+     * @param stack The current ItemStack
+     * @return 0.0 for 100% (no damage / full bar), 1.0 for 0% (fully damaged / empty bar)
+     */
+    public double getDurabilityForDisplay(ItemStack stack)
+    {
+        return (double)stack.func_77952_i() / (double)stack.func_77958_k();
+    }
+
+    /**
+     * Returns the packed int RGB value used to render the durability bar in the GUI.
+     * Defaults to a value based on the hue scaled based on {@link #getDurabilityForDisplay}, but can be overriden.
+     *
+     * @param stack Stack to get durability from
+     * @return A packed RGB value for the durability colour (0x00RRGGBB)
+     */
+    public int getRGBDurabilityForDisplay(ItemStack stack)
+    {
+        return MathHelper.func_181758_c(Math.max(0.0F, (float) (1.0F - getDurabilityForDisplay(stack))) / 3.0F, 1.0F, 1.0F);
+    }
+    /**
+     * Return the maxDamage for this ItemStack. Defaults to the maxDamage field in this item,
+     * but can be overridden here for other sources such as NBT.
+     *
+     * @param stack The itemstack that is damaged
+     * @return the damage value
+     */
+    public int getMaxDamage(ItemStack stack)
+    {
+        return func_77612_l();
+    }
+
+    /**
+     * Return if this itemstack is damaged. Note only called if {@link #isDamageable()} is true.
+     * @param stack the stack
+     * @return if the stack is damaged
+     */
+    public boolean isDamaged(ItemStack stack)
+    {
+        return stack.field_77991_e > 0;
+    }
+
+    /**
+     * Set the damage for this itemstack. Note, this method is responsible for zero checking.
+     * @param stack the stack
+     * @param damage the new damage value
+     */
+    public void setDamage(ItemStack stack, int damage)
+    {
+        stack.field_77991_e = damage;
+
+        if (stack.field_77991_e < 0)
         {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockDirt.DirtType.func_176924_a(p_apply_1_.func_77960_j()).func_176927_c();
-            }
-        })).func_77655_b("dirt"));
+            stack.field_77991_e = 0;
+        }
+    }
+
+    /**
+     * Checked from {@link net.minecraft.client.multiplayer.PlayerControllerMP#onPlayerDestroyBlock(BlockPos pos) PlayerControllerMP.onPlayerDestroyBlock()}
+     * when a creative player left-clicks a block with this item.
+     * Also checked from {@link net.minecraftforge.common.ForgeHooks#onBlockBreakEvent(World, GameType, EntityPlayerMP, BlockPos)} (World, GameType, EntityPlayerMP, BlockPos)  ForgeHooks.onBlockBreakEvent()}
+     * to prevent sending an event.
+     * @return true if the given player can destroy specified block in creative mode with this item
+     */
+    public boolean canDestroyBlockInCreative(World world, BlockPos pos, ItemStack stack, EntityPlayer player)
+    {
+        return !(this instanceof ItemSword);
+    }
+
+    /**
+     * ItemStack sensitive version of {@link #canHarvestBlock(IBlockState)}
+     * @param state The block trying to harvest
+     * @param stack The itemstack used to harvest the block
+     * @return true if can harvest the block
+     */
+    public boolean canHarvestBlock(IBlockState state, ItemStack stack)
+    {
+        return func_150897_b(state);
+    }
+
+    /**
+     * Gets the maximum number of items that this stack should be able to hold.
+     * This is a ItemStack (and thus NBT) sensitive version of Item.getItemStackLimit()
+     *
+     * @param stack The ItemStack
+     * @return The maximum number this item can be stacked to
+     */
+    public int getItemStackLimit(ItemStack stack)
+    {
+        return this.func_77639_j();
+    }
+
+    private java.util.Map<String, Integer> toolClasses = new java.util.HashMap<String, Integer>();
+    /**
+     * Sets or removes the harvest level for the specified tool class.
+     *
+     * @param toolClass Class
+     * @param level Harvest level:
+     *     Wood:    0
+     *     Stone:   1
+     *     Iron:    2
+     *     Diamond: 3
+     *     Gold:    0
+     */
+    public void setHarvestLevel(String toolClass, int level)
+    {
+        if (level < 0)
+            toolClasses.remove(toolClass);
+        else
+            toolClasses.put(toolClass, level);
+    }
+
+    public java.util.Set<String> getToolClasses(ItemStack stack)
+    {
+        return toolClasses.keySet();
+    }
+
+    /**
+     * Queries the harvest level of this item stack for the specified tool class,
+     * Returns -1 if this tool is not of the specified type
+     *
+     * @param stack This item stack instance
+     * @param toolClass Tool Class
+     * @param player The player trying to harvest the given blockstate
+     * @param blockState The block to harvest
+     * @return Harvest level, or -1 if not the specified tool type.
+     */
+    public int getHarvestLevel(ItemStack stack, String toolClass, @Nullable EntityPlayer player, @Nullable IBlockState blockState)
+    {
+        Integer ret = toolClasses.get(toolClass);
+        return ret == null ? -1 : ret;
+    }
+
+    /**
+     * ItemStack sensitive version of getItemEnchantability
+     *
+     * @param stack The ItemStack
+     * @return the item echantability value
+     */
+    public int getItemEnchantability(ItemStack stack)
+    {
+        return func_77619_b();
+    }
+
+    /**
+     * Checks whether an item can be enchanted with a certain enchantment. This applies specifically to enchanting an item in the enchanting table and is called when retrieving the list of possible enchantments for an item.
+     * Enchantments may additionally (or exclusively) be doing their own checks in {@link net.minecraft.enchantment.Enchantment#canApplyAtEnchantingTable(ItemStack)}; check the individual implementation for reference.
+     * By default this will check if the enchantment type is valid for this item type.
+     * @param stack the item stack to be enchanted
+     * @param enchantment the enchantment to be applied
+     * @return true if the enchantment can be applied to this item
+     */
+    public boolean canApplyAtEnchantingTable(ItemStack stack, net.minecraft.enchantment.Enchantment enchantment)
+    {
+        return enchantment.field_77351_y.func_77557_a(stack.func_77973_b());
+    }
+
+    /**
+     * Whether this Item can be used as a payment to activate the vanilla beacon.
+     * @param stack the ItemStack
+     * @return true if this Item can be used
+     */
+    public boolean isBeaconPayment(ItemStack stack)
+    {
+        return this == Items.field_151166_bC || this == Items.field_151045_i || this == Items.field_151043_k || this == Items.field_151042_j;
+    }
+
+    /**
+     * Determine if the player switching between these two item stacks
+     * @param oldStack The old stack that was equipped
+     * @param newStack The new stack
+     * @param slotChanged If the current equipped slot was changed,
+     *                    Vanilla does not play the animation if you switch between two
+     *                    slots that hold the exact same item.
+     * @return True to play the item change animation
+     */
+    public boolean shouldCauseReequipAnimation(ItemStack oldStack, ItemStack newStack, boolean slotChanged)
+    {
+        return !oldStack.equals(newStack); //!ItemStack.areItemStacksEqual(oldStack, newStack);
+    }
+
+    /**
+     * Called when the player is mining a block and the item in his hand changes.
+     * Allows to not reset blockbreaking if only NBT or similar changes.
+     * @param oldStack The old stack that was used for mining. Item in players main hand
+     * @param newStack The new stack
+     * @return True to reset block break progress
+     */
+    public boolean shouldCauseBlockBreakReset(ItemStack oldStack, ItemStack newStack)
+    {
+        return !(newStack.func_77973_b() == oldStack.func_77973_b() && ItemStack.func_77970_a(newStack, oldStack) && (newStack.func_77984_f() || newStack.func_77960_j() == oldStack.func_77960_j()));
+    }
+
+    /**
+     * Called to get the Mod ID of the mod that *created* the ItemStack,
+     * instead of the real Mod ID that *registered* it.
+     *
+     * For example the Forge Universal Bucket creates a subitem for each modded fluid,
+     * and it returns the modded fluid's Mod ID here.
+     *
+     * Mods that register subitems for other mods can override this.
+     * Informational mods can call it to show the mod that created the item.
+     *
+     * @param itemStack the ItemStack to check
+     * @return the Mod ID for the ItemStack, or
+     *         null when there is no specially associated mod and {@link #getRegistryName()} would return null.
+     */
+    @Nullable
+    public String getCreatorModId(ItemStack itemStack)
+    {
+        ResourceLocation registryName = getRegistryName();
+        return registryName == null ? null : registryName.func_110624_b();
+    }
+
+    /**
+     * Called from ItemStack.setItem, will hold extra data for the life of this ItemStack.
+     * Can be retrieved from stack.getCapabilities()
+     * The NBT can be null if this is not called from readNBT or if the item the stack is
+     * changing FROM is different then this item, or the previous item had no capabilities.
+     *
+     * This is called BEFORE the stacks item is set so you can use stack.getItem() to see the OLD item.
+     * Remember that getItem CAN return null.
+     *
+     * @param stack The ItemStack
+     * @param nbt NBT of this item serialized, or null.
+     * @return A holder instance associated with this ItemStack where you can hold capabilities for the life of this item.
+     */
+    @Nullable
+    public net.minecraftforge.common.capabilities.ICapabilityProvider initCapabilities(ItemStack stack, @Nullable NBTTagCompound nbt)
+    {
+        return null;
+    }
+
+    /**
+     * Can this Item disable a shield
+     * @param stack The ItemStack
+     * @param shield The shield in question
+     * @param entity The EntityLivingBase holding the shield
+     * @param attacker The EntityLivingBase holding the ItemStack
+     * @retrun True if this ItemStack can disable the shield in question.
+     */
+    public boolean canDisableShield(ItemStack stack, ItemStack shield, EntityLivingBase entity, EntityLivingBase attacker)
+    {
+        return this instanceof ItemAxe;
+    }
+
+    /**
+     * Is this Item a shield
+     * @param stack The ItemStack
+     * @param entity The Entity holding the ItemStack
+     * @return True if the ItemStack is considered a shield
+     */
+    public boolean isShield(ItemStack stack, @Nullable EntityLivingBase entity)
+    {
+        return stack.func_77973_b() == Items.field_185159_cQ;
+    }
+
+    /**
+     * @return the fuel burn time for this itemStack in a furnace.
+     * Return 0 to make it not act as a fuel.
+     * Return -1 to let the default vanilla logic decide.
+     */
+    public int getItemBurnTime(ItemStack itemStack)
+    {
+        return -1;
+    }
+    
+    /** 
+     * Returns an enum constant of type {@code HorseArmorType}.
+     * The returned enum constant will be used to determine the armor value and texture of this item when equipped.
+     * @param stack the armor stack
+     * @return an enum constant of type {@code HorseArmorType}. Return HorseArmorType.NONE if this is not horse armor
+     */
+    public net.minecraft.entity.passive.HorseArmorType getHorseArmorType(ItemStack stack)
+    {
+        return net.minecraft.entity.passive.HorseArmorType.func_188576_a(stack.func_77973_b());
+    }
+    
+    public String getHorseArmorTexture(net.minecraft.entity.EntityLiving wearer, ItemStack stack)
+    {
+        return getHorseArmorType(stack).func_188574_d();
+    }
+    
+    /**
+     * Called every tick from {@link EntityHorse#onUpdate()} ()} on the item in the armor slot.
+     * @param world the world the horse is in
+     * @param horse the horse wearing this armor
+     * @param armor the armor itemstack
+     */
+    public void onHorseArmorTick(World world, net.minecraft.entity.EntityLiving horse, ItemStack armor) {}
+
+    /* ======================================== FORGE END   =====================================*/
+
+    public static void func_150900_l()
+    {
+        func_179214_a(Blocks.field_150350_a, new ItemAir(Blocks.field_150350_a));
+        func_179214_a(Blocks.field_150348_b, (new ItemMultiTexture(Blocks.field_150348_b, Blocks.field_150348_b, p_apply_1_ -> BlockStone.EnumType.func_176643_a(p_apply_1_.func_77960_j()).func_176644_c())).func_77655_b("stone"));
+        func_179214_a(Blocks.STONE2, (new ItemMultiTexture(Blocks.STONE2, Blocks.STONE2, p_apply_1_ -> BlockStone2.EnumType.byMetadata(p_apply_1_.func_77960_j()).getUnlocalizedName())).func_77655_b("stone2"));
+        func_179214_a(Blocks.field_150349_c, new ItemColored(Blocks.field_150349_c, false).func_77655_b("grass"));
+        func_179214_a(Blocks.field_150346_d, (new ItemMultiTexture(Blocks.field_150346_d, Blocks.field_150346_d, p_apply_1_ -> BlockDirt.DirtType.func_176924_a(p_apply_1_.func_77960_j()).func_176927_c())).func_77655_b("dirt"));
         func_179216_c(Blocks.field_150347_e);
-        func_179214_a(Blocks.field_150344_f, (new ItemMultiTexture(Blocks.field_150344_f, Blocks.field_150344_f, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockPlanks.EnumType.func_176837_a(p_apply_1_.func_77960_j()).func_176840_c();
-            }
-        })).func_77655_b("wood"));
-        func_179214_a(Blocks.field_150345_g, (new ItemMultiTexture(Blocks.field_150345_g, Blocks.field_150345_g, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockPlanks.EnumType.func_176837_a(p_apply_1_.func_77960_j()).func_176840_c();
-            }
-        })).func_77655_b("sapling"));
+        func_179214_a(Blocks.field_150344_f, (new ItemMultiTexture(Blocks.field_150344_f, Blocks.field_150344_f, p_apply_1_ -> BlockPlanks.EnumType.func_176837_a(p_apply_1_.func_77960_j()).func_176840_c())).func_77655_b("wood"));
+        func_179214_a(Blocks.field_150345_g, (new ItemMultiTexture(Blocks.field_150345_g, Blocks.field_150345_g, p_apply_1_ -> BlockPlanks.EnumType.func_176837_a(p_apply_1_.func_77960_j()).func_176840_c())).func_77655_b("sapling"));
         func_179216_c(Blocks.field_150357_h);
-        func_179214_a(Blocks.field_150354_m, (new ItemMultiTexture(Blocks.field_150354_m, Blocks.field_150354_m, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockSand.EnumType.func_176686_a(p_apply_1_.func_77960_j()).func_176685_d();
-            }
-        })).func_77655_b("sand"));
+        func_179214_a(Blocks.field_150354_m, (new ItemMultiTexture(Blocks.field_150354_m, Blocks.field_150354_m, p_apply_1_ -> BlockSand.EnumType.func_176686_a(p_apply_1_.func_77960_j()).func_176685_d())).func_77655_b("sand"));
         func_179216_c(Blocks.field_150351_n);
         func_179216_c(Blocks.field_150352_o);
         func_179216_c(Blocks.field_150366_p);
         func_179216_c(Blocks.field_150365_q);
-        func_179214_a(Blocks.field_150364_r, (new ItemMultiTexture(Blocks.field_150364_r, Blocks.field_150364_r, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockPlanks.EnumType.func_176837_a(p_apply_1_.func_77960_j()).func_176840_c();
-            }
-        })).func_77655_b("log"));
-        func_179214_a(Blocks.field_150363_s, (new ItemMultiTexture(Blocks.field_150363_s, Blocks.field_150363_s, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockPlanks.EnumType.func_176837_a(p_apply_1_.func_77960_j() + 4).func_176840_c();
-            }
-        })).func_77655_b("log"));
+        func_179214_a(Blocks.field_150364_r, (new ItemMultiTexture(Blocks.field_150364_r, Blocks.field_150364_r, p_apply_1_ -> BlockPlanks.EnumType.func_176837_a(p_apply_1_.func_77960_j()).func_176840_c())).func_77655_b("log"));
+        func_179214_a(Blocks.field_150363_s, (new ItemMultiTexture(Blocks.field_150363_s, Blocks.field_150363_s, p_apply_1_ -> BlockPlanks.EnumType.func_176837_a(p_apply_1_.func_77960_j() + 4).func_176840_c())).func_77655_b("log"));
         func_179214_a(Blocks.field_150362_t, (new ItemLeaves(Blocks.field_150362_t)).func_77655_b("leaves"));
         func_179214_a(Blocks.field_150361_u, (new ItemLeaves(Blocks.field_150361_u)).func_77655_b("leaves"));
-        func_179214_a(Blocks.field_150360_v, (new ItemMultiTexture(Blocks.field_150360_v, Blocks.field_150360_v, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return (p_apply_1_.func_77960_j() & 1) == 1 ? "wet" : "dry";
-            }
-        })).func_77655_b("sponge"));
+        func_179214_a(Blocks.field_150360_v, (new ItemMultiTexture(Blocks.field_150360_v, Blocks.field_150360_v, p_apply_1_ -> (p_apply_1_.func_77960_j() & 1) == 1 ? "wet" : "dry")).func_77655_b("sponge"));
         func_179216_c(Blocks.field_150359_w);
         func_179216_c(Blocks.field_150369_x);
         func_179216_c(Blocks.field_150368_y);
         func_179216_c(Blocks.field_150367_z);
-        func_179214_a(Blocks.field_150322_A, (new ItemMultiTexture(Blocks.field_150322_A, Blocks.field_150322_A, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockSandStone.EnumType.func_176673_a(p_apply_1_.func_77960_j()).func_176676_c();
-            }
-        })).func_77655_b("sandStone"));
+        func_179214_a(Blocks.field_150322_A, (new ItemMultiTexture(Blocks.field_150322_A, Blocks.field_150322_A, p_apply_1_ -> BlockSandStone.EnumType.func_176673_a(p_apply_1_.func_77960_j()).func_176676_c())).func_77655_b("sandStone"));
         func_179216_c(Blocks.field_150323_B);
         func_179216_c(Blocks.field_150318_D);
         func_179216_c(Blocks.field_150319_E);
@@ -528,20 +1172,8 @@
         func_179216_c(Blocks.field_150330_I);
         func_179214_a(Blocks.field_150331_J, new ItemPiston(Blocks.field_150331_J));
         func_179214_a(Blocks.field_150325_L, (new ItemCloth(Blocks.field_150325_L)).func_77655_b("cloth"));
-        func_179214_a(Blocks.field_150327_N, (new ItemMultiTexture(Blocks.field_150327_N, Blocks.field_150327_N, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockFlower.EnumFlowerType.func_176967_a(BlockFlower.EnumFlowerColor.YELLOW, p_apply_1_.func_77960_j()).func_176963_d();
-            }
-        })).func_77655_b("flower"));
-        func_179214_a(Blocks.field_150328_O, (new ItemMultiTexture(Blocks.field_150328_O, Blocks.field_150328_O, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockFlower.EnumFlowerType.func_176967_a(BlockFlower.EnumFlowerColor.RED, p_apply_1_.func_77960_j()).func_176963_d();
-            }
-        })).func_77655_b("rose"));
+        func_179214_a(Blocks.field_150327_N, (new ItemMultiTexture(Blocks.field_150327_N, Blocks.field_150327_N, p_apply_1_ -> BlockFlower.EnumFlowerType.func_176967_a(BlockFlower.EnumFlowerColor.YELLOW, p_apply_1_.func_77960_j()).func_176963_d())).func_77655_b("flower"));
+        func_179214_a(Blocks.field_150328_O, (new ItemMultiTexture(Blocks.field_150328_O, Blocks.field_150328_O, p_apply_1_ -> BlockFlower.EnumFlowerType.func_176967_a(BlockFlower.EnumFlowerColor.RED, p_apply_1_.func_77960_j()).func_176963_d())).func_77655_b("rose"));
         func_179216_c(Blocks.field_150338_P);
         func_179216_c(Blocks.field_150337_Q);
         func_179216_c(Blocks.field_150340_R);
@@ -561,8 +1193,6 @@
         func_179216_c(Blocks.field_185769_cV);
         func_179214_a(Blocks.field_185771_cX, (new ItemSlab(Blocks.field_185771_cX, Blocks.field_185771_cX, Blocks.field_185770_cW)).func_77655_b("purpurSlab"));
         func_179216_c(Blocks.field_150474_ac);
-        func_179216_c(Blocks.field_150476_ad);
-        func_179216_c(Blocks.field_150486_ae);
         func_179216_c(Blocks.field_150482_ag);
         func_179216_c(Blocks.field_150484_ah);
         func_179216_c(Blocks.field_150462_ai);
@@ -595,20 +1225,8 @@
         func_179216_c(Blocks.field_150426_aN);
         func_179216_c(Blocks.field_150428_aP);
         func_179216_c(Blocks.field_150415_aT);
-        func_179214_a(Blocks.field_150418_aU, (new ItemMultiTexture(Blocks.field_150418_aU, Blocks.field_150418_aU, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockSilverfish.EnumType.func_176879_a(p_apply_1_.func_77960_j()).func_176882_c();
-            }
-        })).func_77655_b("monsterStoneEgg"));
-        func_179214_a(Blocks.field_150417_aV, (new ItemMultiTexture(Blocks.field_150417_aV, Blocks.field_150417_aV, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockStoneBrick.EnumType.func_176613_a(p_apply_1_.func_77960_j()).func_176614_c();
-            }
-        })).func_77655_b("stonebricksmooth"));
+        func_179214_a(Blocks.field_150418_aU, (new ItemMultiTexture(Blocks.field_150418_aU, Blocks.field_150418_aU, p_apply_1_ -> BlockSilverfish.EnumType.func_176879_a(p_apply_1_.func_77960_j()).func_176882_c())).func_77655_b("monsterStoneEgg"));
+        func_179214_a(Blocks.field_150417_aV, (new ItemMultiTexture(Blocks.field_150417_aV, Blocks.field_150417_aV, p_apply_1_ -> BlockStoneBrick.EnumType.func_176613_a(p_apply_1_.func_77960_j()).func_176614_c())).func_77655_b("stonebricksmooth"));
         func_179216_c(Blocks.field_150420_aW);
         func_179216_c(Blocks.field_150419_aX);
         func_179216_c(Blocks.field_150411_aY);
@@ -640,27 +1258,19 @@
         func_179216_c(Blocks.field_150477_bB);
         func_179216_c(Blocks.field_150479_bC);
         func_179216_c(Blocks.field_150475_bE);
-        func_179216_c(Blocks.field_150485_bF);
-        func_179216_c(Blocks.field_150487_bG);
-        func_179216_c(Blocks.field_150481_bH);
         func_179216_c(Blocks.field_150483_bI);
         func_179216_c(Blocks.field_150461_bJ);
-        func_179214_a(Blocks.field_150463_bK, (new ItemMultiTexture(Blocks.field_150463_bK, Blocks.field_150463_bK, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockWall.EnumType.func_176660_a(p_apply_1_.func_77960_j()).func_176659_c();
-            }
-        })).func_77655_b("cobbleWall"));
+        func_179214_a(Blocks.field_150463_bK, (new ItemMultiTexture(Blocks.field_150463_bK, Blocks.field_150463_bK, p_apply_1_ -> BlockWall.EnumType.func_176660_a(p_apply_1_.func_77960_j()).func_176659_c())).func_77655_b("cobbleWall"));
         func_179216_c(Blocks.field_150471_bO);
         func_179214_a(Blocks.field_150467_bQ, (new ItemAnvilBlock(Blocks.field_150467_bQ)).func_77655_b("anvil"));
-        func_179216_c(Blocks.field_150447_bR);
         func_179216_c(Blocks.field_150445_bS);
         func_179216_c(Blocks.field_150443_bT);
         func_179216_c(Blocks.field_150453_bW);
         func_179216_c(Blocks.field_150451_bX);
         func_179216_c(Blocks.field_150449_bY);
         func_179216_c(Blocks.field_150438_bZ);
+        func_179216_c(Blocks.KELP_PLANT);
+        func_179216_c(Blocks.DRIED_KELP_BLOCK);
         func_179214_a(Blocks.field_150371_ca, (new ItemMultiTexture(Blocks.field_150371_ca, Blocks.field_150371_ca, new String[] {"default", "chiseled", "lines"})).func_77655_b("quartzBlock"));
         func_179216_c(Blocks.field_150370_cb);
         func_179216_c(Blocks.field_150408_cc);
@@ -673,34 +1283,14 @@
         func_179216_c(Blocks.field_150405_ch);
         func_179216_c(Blocks.field_150402_ci);
         func_179216_c(Blocks.field_150403_cj);
-        func_179216_c(Blocks.field_150400_ck);
-        func_179216_c(Blocks.field_150401_cl);
         func_179216_c(Blocks.field_180399_cE);
         func_179216_c(Blocks.field_185774_da);
-        func_179214_a(Blocks.field_150398_cm, (new ItemMultiTexture(Blocks.field_150398_cm, Blocks.field_150398_cm, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockDoublePlant.EnumPlantType.func_176938_a(p_apply_1_.func_77960_j()).func_176939_c();
-            }
-        })).func_77655_b("doublePlant"));
+        func_179214_a(Blocks.field_150398_cm, (new ItemMultiTexture(Blocks.field_150398_cm, Blocks.field_150398_cm, p_apply_1_ -> BlockDoublePlant.EnumPlantType.func_176938_a(p_apply_1_.func_77960_j()).func_176939_c())).func_77655_b("doublePlant"));
         func_179214_a(Blocks.field_150399_cn, (new ItemCloth(Blocks.field_150399_cn)).func_77655_b("stainedGlass"));
         func_179214_a(Blocks.field_150397_co, (new ItemCloth(Blocks.field_150397_co)).func_77655_b("stainedGlassPane"));
-        func_179214_a(Blocks.field_180397_cI, (new ItemMultiTexture(Blocks.field_180397_cI, Blocks.field_180397_cI, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockPrismarine.EnumType.func_176810_a(p_apply_1_.func_77960_j()).func_176809_c();
-            }
-        })).func_77655_b("prismarine"));
+        func_179214_a(Blocks.field_180397_cI, (new ItemMultiTexture(Blocks.field_180397_cI, Blocks.field_180397_cI, p_apply_1_ -> BlockPrismarine.EnumType.func_176810_a(p_apply_1_.func_77960_j()).func_176809_c())).func_77655_b("prismarine"));
         func_179216_c(Blocks.field_180398_cJ);
-        func_179214_a(Blocks.field_180395_cM, (new ItemMultiTexture(Blocks.field_180395_cM, Blocks.field_180395_cM, new ItemMultiTexture.Mapper()
-        {
-            public String apply(ItemStack p_apply_1_)
-            {
-                return BlockRedSandstone.EnumType.func_176825_a(p_apply_1_.func_77960_j()).func_176828_c();
-            }
-        })).func_77655_b("redSandStone"));
+        func_179214_a(Blocks.field_180395_cM, (new ItemMultiTexture(Blocks.field_180395_cM, Blocks.field_180395_cM, p_apply_1_ -> BlockRedSandstone.EnumType.func_176825_a(p_apply_1_.func_77960_j()).func_176828_c())).func_77655_b("redSandStone"));
         func_179216_c(Blocks.field_180396_cN);
         func_179214_a(Blocks.field_180389_cP, (new ItemSlab(Blocks.field_180389_cP, Blocks.field_180389_cP, Blocks.field_180388_cO)).func_77655_b("stoneSlab2"));
         func_179216_c(Blocks.field_185776_dc);
@@ -746,6 +1336,67 @@
         func_179214_a(Blocks.field_192443_dR, (new ItemCloth(Blocks.field_192443_dR)).func_77655_b("concrete"));
         func_179214_a(Blocks.field_192444_dS, (new ItemCloth(Blocks.field_192444_dS)).func_77655_b("concrete_powder"));
         func_179216_c(Blocks.field_185779_df);
+
+        func_179216_c(Blocks.YELLOW_CORAL);
+        func_179216_c(Blocks.PINK_CORAL);
+        func_179216_c(Blocks.PURPLE_CORAL);
+        func_179216_c(Blocks.BLUE_CORAL);
+        func_179216_c(Blocks.RED_CORAL);
+
+        func_179216_c(Blocks.YELLOW_CORAL_PLANT);
+        func_179216_c(Blocks.PINK_CORAL_PLANT);
+        func_179216_c(Blocks.PURPLE_CORAL_PLANT);
+        func_179216_c(Blocks.BLUE_CORAL_PLANT);
+        func_179216_c(Blocks.RED_CORAL_PLANT);
+
+        func_179216_c(Blocks.YELLOW_BRAIN_CORAL);
+        func_179216_c(Blocks.PINK_BRAIN_CORAL);
+        func_179216_c(Blocks.PURPLE_BRAIN_CORAL);
+        func_179216_c(Blocks.BLUE_BRAIN_CORAL);
+        func_179216_c(Blocks.RED_BRAIN_CORAL);
+
+        func_179216_c(Blocks.YELLOW_PIPE_CORAL);
+        func_179216_c(Blocks.PINK_PIPE_CORAL);
+        func_179216_c(Blocks.PURPLE_PIPE_CORAL);
+        func_179216_c(Blocks.BLUE_PIPE_CORAL);
+        func_179216_c(Blocks.RED_PIPE_CORAL);
+
+        func_179216_c(Blocks.YELLOW_SEA_FAN_CORAL);
+        func_179216_c(Blocks.PINK_SEA_FAN_CORAL);
+        func_179216_c(Blocks.PURPLE_SEA_FAN_CORAL);
+        func_179216_c(Blocks.BLUE_SEA_FAN_CORAL);
+        func_179216_c(Blocks.RED_SEA_FAN_CORAL);
+
+        func_179216_c(Blocks.YELLOW_DEAD_CORAL);
+        func_179216_c(Blocks.PINK_DEAD_CORAL);
+        func_179216_c(Blocks.PURPLE_DEAD_CORAL);
+        func_179216_c(Blocks.BLUE_DEAD_CORAL);
+        func_179216_c(Blocks.RED_DEAD_CORAL);
+
+        func_179216_c(Blocks.YELLOW_DEAD_CORAL_PLANT);
+        func_179216_c(Blocks.PINK_DEAD_CORAL_PLANT);
+        func_179216_c(Blocks.PURPLE_DEAD_CORAL_PLANT);
+        func_179216_c(Blocks.BLUE_DEAD_CORAL_PLANT);
+        func_179216_c(Blocks.RED_DEAD_CORAL_PLANT);
+
+        func_179216_c(Blocks.YELLOW_DEAD_BRAIN_CORAL);
+        func_179216_c(Blocks.PINK_DEAD_BRAIN_CORAL);
+        func_179216_c(Blocks.PURPLE_DEAD_BRAIN_CORAL);
+        func_179216_c(Blocks.BLUE_DEAD_BRAIN_CORAL);
+        func_179216_c(Blocks.RED_DEAD_BRAIN_CORAL);
+
+        func_179216_c(Blocks.YELLOW_DEAD_PIPE_CORAL);
+        func_179216_c(Blocks.PINK_DEAD_PIPE_CORAL);
+        func_179216_c(Blocks.PURPLE_DEAD_PIPE_CORAL);
+        func_179216_c(Blocks.BLUE_DEAD_PIPE_CORAL);
+        func_179216_c(Blocks.RED_DEAD_PIPE_CORAL);
+
+        func_179216_c(Blocks.YELLOW_DEAD_SEA_FAN_CORAL);
+        func_179216_c(Blocks.PINK_DEAD_SEA_FAN_CORAL);
+        func_179216_c(Blocks.PURPLE_DEAD_SEA_FAN_CORAL);
+        func_179216_c(Blocks.BLUE_DEAD_SEA_FAN_CORAL);
+        func_179216_c(Blocks.RED_DEAD_SEA_FAN_CORAL);
+
         func_179217_a(256, "iron_shovel", (new ItemSpade(Item.ToolMaterial.IRON)).func_77655_b("shovelIron"));
         func_179217_a(257, "iron_pickaxe", (new ItemPickaxe(Item.ToolMaterial.IRON)).func_77655_b("pickaxeIron"));
         func_179217_a(258, "iron_axe", (new ItemAxe(Item.ToolMaterial.IRON)).func_77655_b("hatchetIron"));
@@ -814,7 +1465,17 @@
         func_179217_a(321, "painting", (new ItemHangingEntity(EntityPainting.class)).func_77655_b("painting"));
         func_179217_a(322, "golden_apple", (new ItemAppleGold(4, 1.2F, false)).func_77848_i().func_77655_b("appleGold"));
         func_179217_a(323, "sign", (new ItemSign()).func_77655_b("sign"));
-        func_179217_a(324, "wooden_door", (new ItemDoor(Blocks.field_180413_ao)).func_77655_b("doorOak"));
+
+        for(BlockPlanks.EnumType type : BlockPlanks.EnumType.values()) {
+            func_179217_a(324, type.func_176610_l() + "_door", (new ItemDoor(Objects.requireNonNull(Block.func_149684_b("minecraft:" + type.func_176610_l() + "_door")))).func_77655_b(type.func_176610_l() + "_door"));
+            func_179217_a(325, type.func_176610_l() + "_trapped_chest", (new ItemBlock(Objects.requireNonNull(Block.func_149684_b("minecraft:" + type.func_176610_l() + "_trapped_chest")))).func_77655_b(type.func_176610_l() + "_door"));
+            func_179217_a(326, type.func_176610_l() + "_chest", (new ItemBlock(Objects.requireNonNull(Block.func_149684_b("minecraft:" + type.func_176610_l() + "_chest")))).func_77655_b(type.func_176610_l() + "_door"));
+//            registerItem(327, type.getName() + "_fence", (new ItemBlock(Objects.requireNonNull(Block.getBlockFromName("minecraft:" + type.getName() + "_fence")))).setUnlocalizedName(type.getName() + "_fence"));
+//            registerItem(328, type.getName() + "_fence_gate", (new ItemBlock(Objects.requireNonNull(Block.getBlockFromName("minecraft:" + type.getName() + "_fence_gate")))).setUnlocalizedName(type.getName() + "_fence_gate"));
+//            registerItem(329, type.getName() + "_bookshelf", (new ItemBlock(Objects.requireNonNull(Block.getBlockFromName("minecraft:" + type.getName() + "_bookshelf")))).setUnlocalizedName(type.getName() + "_bookshelf"));
+            func_179217_a(330, type.func_176610_l() + "_stairs", (new ItemBlock(Objects.requireNonNull(Block.func_149684_b("minecraft:" + type.func_176610_l() + "_stairs")))).func_77655_b(type.func_176610_l() + "_stairs"));
+        }
+
         Item item = (new ItemBucket(Blocks.field_150350_a)).func_77655_b("bucket").func_77625_d(16);
         func_179217_a(325, "bucket", item);
         func_179217_a(326, "water_bucket", (new ItemBucket(Blocks.field_150358_i)).func_77655_b("bucketWater").func_77642_a(item));
@@ -919,11 +1580,6 @@
         func_179217_a(424, "cooked_mutton", (new ItemFood(6, 0.8F, true)).func_77655_b("muttonCooked"));
         func_179217_a(425, "banner", (new ItemBanner()).func_77655_b("banner"));
         func_179217_a(426, "end_crystal", new ItemEndCrystal());
-        func_179217_a(427, "spruce_door", (new ItemDoor(Blocks.field_180414_ap)).func_77655_b("doorSpruce"));
-        func_179217_a(428, "birch_door", (new ItemDoor(Blocks.field_180412_aq)).func_77655_b("doorBirch"));
-        func_179217_a(429, "jungle_door", (new ItemDoor(Blocks.field_180411_ar)).func_77655_b("doorJungle"));
-        func_179217_a(430, "acacia_door", (new ItemDoor(Blocks.field_180410_as)).func_77655_b("doorAcacia"));
-        func_179217_a(431, "dark_oak_door", (new ItemDoor(Blocks.field_180409_at)).func_77655_b("doorDarkOak"));
         func_179217_a(432, "chorus_fruit", (new ItemChorusFruit(4, 0.3F)).func_77848_i().func_77655_b("chorusFruit").func_77637_a(CreativeTabs.field_78035_l));
         func_179217_a(433, "chorus_fruit_popped", (new Item()).func_77655_b("chorusFruitPopped").func_77637_a(CreativeTabs.field_78035_l));
         func_179217_a(434, "beetroot", (new ItemFood(1, 0.6F, false)).func_77655_b("beetroot"));
@@ -945,6 +1601,10 @@
         func_179217_a(450, "shulker_shell", (new Item()).func_77655_b("shulkerShell").func_77637_a(CreativeTabs.field_78035_l));
         func_179217_a(452, "iron_nugget", (new Item()).func_77655_b("ironNugget").func_77637_a(CreativeTabs.field_78035_l));
         func_179217_a(453, "knowledge_book", (new ItemKnowledgeBook()).func_77655_b("knowledgeBook"));
+        func_179217_a(454, "cheese", (new ItemFood(2, 0.6f, false)).func_77655_b("cheese"));
+
+        func_179217_a(455, "steak", (new ItemFood(5, 0.6F, false)).func_77655_b("steak"));
+
         func_179217_a(2256, "record_13", (new ItemRecord("13", SoundEvents.field_187828_ep)).func_77655_b("record"));
         func_179217_a(2257, "record_cat", (new ItemRecord("cat", SoundEvents.field_187832_er)).func_77655_b("record"));
         func_179217_a(2258, "record_blocks", (new ItemRecord("blocks", SoundEvents.field_187830_eq)).func_77655_b("record"));
@@ -986,7 +1646,7 @@
         return new ItemStack(this);
     }
 
-    public static enum ToolMaterial
+    public enum ToolMaterial
     {
         WOOD(0, 59, 2.0F, 0.0F, 15),
         STONE(1, 131, 4.0F, 1.0F, 5),
@@ -999,6 +1659,8 @@
         private final float field_78010_h;
         private final float field_78011_i;
         private final int field_78008_j;
+        //Added by forge for custom Tool materials.
+        private ItemStack repairMaterial = ItemStack.field_190927_a;
 
         private ToolMaterial(int p_i1874_3_, int p_i1874_4_, float p_i1874_5_, float p_i1874_6_, int p_i1874_7_)
         {
@@ -1034,6 +1696,7 @@
             return this.field_78008_j;
         }
 
+        @Deprecated // Use getRepairItemStack below
         public Item func_150995_f()
         {
             if (this == WOOD)
@@ -1057,5 +1720,21 @@
                 return this == DIAMOND ? Items.field_151045_i : null;
             }
         }
+
+        public ToolMaterial setRepairItem(ItemStack stack)
+        {
+            if (!this.repairMaterial.func_190926_b()) throw new RuntimeException("Repair material has already been set");
+            if (this == WOOD || this == STONE || this == GOLD || this == IRON || this == DIAMOND) throw new RuntimeException("Can not change vanilla tool repair materials");
+            this.repairMaterial = stack;
+            return this;
+        }
+
+        public ItemStack getRepairItemStack()
+        {
+            if (!repairMaterial.func_190926_b()) return repairMaterial;
+            Item ret = this.func_150995_f();
+            if (ret != null) repairMaterial = new ItemStack(ret, 1, net.minecraftforge.oredict.OreDictionary.WILDCARD_VALUE);
+            return repairMaterial;
+        }
     }
 }
